package com.tp.GovEReceipt.Utils;

import java.io.IOException;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataUtils {

	private static final Logger logger = LoggerFactory.getLogger(DataUtils.class);

	public static final String ASC = "asc";

	public static final String DESC = "desc";

	public static String chars = "ie98w1rm5d";

	public static final String TPCTAX_NO = "379030100D"; // 財政局稅捐處

	public static final String DOCATCG_NO = "379020000A"; // 臺北市政府民政局 Department of Civil Affairs, Taipei City
															// Government

	/**
	 * uuid加上時效
	 * 
	 * @param no
	 * @return
	 */
	public static String addDateUuid(String uuid) {
		if (StringUtils.isBlank(uuid)) {
			return uuid;
		}

		String dateSt = DateUtils.sdf(new Date(), "yyyyssMMmmdd");
		String[] uuids = uuid.split("-");
		String uuidDate = getUUID().split("-")[0];

		for (String st : uuids) {
			uuidDate += "-" + st;
		}

		String newDataSt = "";

		for (int i = 0; i < dateSt.length(); i++) {
			Integer dataInt = Character.getNumericValue(dateSt.charAt(i));
			newDataSt += chars.charAt(dataInt);
		}

		uuidDate += "-" + newDataSt;

		return uuidDate;
	}

	/**
	 * 檢核uuid
	 * 
	 * @param no
	 * @return
	 */
	public static String checkUuid(String uuid) {
		try {
			String[] uuids = uuid.split("-");
			String dateSt = uuids[uuids.length - 1];
			String DateSt = "";

			for (int i = 0; i < dateSt.length(); i++) {
				DateSt += chars.indexOf(dateSt.charAt(i));
			}

			String newDateSt = DateUtils.sdfYMD(new Date());
			String newDate = DateUtils.sdfYMD(DateUtils.sdf(DateSt, "yyyyssMMmmdd"));

			if (newDateSt.equals(newDate)) {
				return uuid.substring(9, (uuid.length() - 13));
			}
		} catch (Exception e) {
			logger.error(e.getMessage());
		}

		return null;
	}

	/**
	 * 數字轉成7位數的字串，不足7位的數字前方補0
	 * 
	 * @param no
	 * @return
	 */
	public static String decimalFormat(Integer no) {
		DecimalFormat decimalFormat = new DecimalFormat("0000000");
		return decimalFormat.format(no);
	}

	/**
	 * 1.去掉小數點後面多餘的零 2.將數字格式化為千分位表示法。
	 */
	public static String handleMoney(String s) {
		if (s == null)
			return "";

		DecimalFormat decimalFormat = new DecimalFormat(",###");

		if (s.indexOf(".") > 0) {
			s = s.replaceAll("0+?$", ""); // 去掉多餘的零
			s = s.replaceAll("[.]$", ""); // 如最後一位是.則去掉
		}

		String intPart = "";
		String dotPart = "";
		intPart = s.split("\\.")[0];
		if (s.indexOf(".") > 0) {
			dotPart = "." + s.split("\\.")[1];
		}

		s = decimalFormat.format(Double.parseDouble(intPart)) + dotPart;

		return s;
	}

	/**
	 * 1.留小數點後2位 2.將數字格式化為千分位表示法。
	 */
	public static String handleMoney2(String s) {
		if (s == null)
			return "0.00";

		DecimalFormat decimalFormat = new DecimalFormat(",##0.00");
		s = decimalFormat.format(Double.parseDouble(s));
		if (StringUtils.equals(s, ".00")) {
			s = "0.00";
		}
		return s;
	}

	/**
	 * 1.留小數點後1位 2.將數字格式化為千分位表示法。3.四捨五入
	 */
	public static String handleMoney3(String s) {
		if (s == null)
			return "0.0";

		DecimalFormat decimalFormat = new DecimalFormat(",###.0");
		decimalFormat.setRoundingMode(RoundingMode.HALF_UP);
		// 補0001確保五會進位
		s = Double.parseDouble(s) / 1000 + "0001";
		s = decimalFormat.format(Double.parseDouble(s));
		if (StringUtils.equals(s, ".0")) {
			s = "0.0";
		}
		return s;
	}

	public static String getUUID() {
		return UUID.randomUUID().toString();
	}

	/**
	 * 確認是否全數字
	 * 
	 * @param str
	 * @return
	 */
	public static Boolean isValuesAllNum(String str) {
		Boolean rtn = false;
		try {
			Pattern pattern = Pattern.compile("[0-9]+");
			Matcher isNum = pattern.matcher(str);
			rtn = isNum.matches();
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return rtn;
	}

	/**
	 * 確認是否全英文
	 * 
	 * @param str
	 * @return
	 */
	public static Boolean isValuesAllEn(String str) {
		Boolean rtn = false;
		try {
			Pattern pattern = Pattern.compile("[a-zA-Z]+");
			Matcher isNum = pattern.matcher(str);
			rtn = isNum.matches();
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return rtn;
	}

	/**
	 * 取IP位置
	 */
	public static String getIpAddr(HttpServletRequest request) {
		String ip = null;
		try {
			ip = request.getHeader("x-forwarded-for");
			if (StringUtils.isEmpty(ip) || "unknown".equalsIgnoreCase(ip)) {
				ip = request.getHeader("Proxy-Client-IP");
			}
			if (StringUtils.isEmpty(ip) || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
				ip = request.getHeader("WL-Proxy-Client-IP");
			}
			if (StringUtils.isEmpty(ip) || "unknown".equalsIgnoreCase(ip)) {
				ip = request.getHeader("HTTP_CLIENT_IP");
			}
			if (StringUtils.isEmpty(ip) || "unknown".equalsIgnoreCase(ip)) {
				ip = request.getHeader("HTTP_X_FORWARDED_FOR");
			}
			if (StringUtils.isEmpty(ip) || "unknown".equalsIgnoreCase(ip)) {
				ip = request.getRemoteAddr();
			}
		} catch (Exception e) {
			logger.error("IPUtils ERROR ", e);
			logger.error(e.getMessage());
		}

		return ip;
	}

	/**
	 * 取request回來的cookie
	 */
	public static String getCookieValues(HttpServletRequest request, HttpServletResponse response, String cookieName) {
		Cookie[] cookies = request.getCookies();
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if (StringUtils.equals(cookie.getName(), cookieName)) {
//					Cookie cookie2 = new Cookie(cookie.getName(), cookie.getValue());
//					cookie2.setMaxAge(30 * 24 * 60 * 60 );
//					cookie2.setPath("/");
//					cookie2.setHttpOnly(true);
//					cookie2.setSecure(true);
//					response.addCookie(cookie2);

					System.out.println("取得Cookie:" + cookie.getName() + " <==> " + cookie.getValue());
					return cookie.getValue();
				}
			}
		} else {
			System.out.println("cooike是空的");
		}

		return null;
	}

	/**
	 * 取request回來的cookie
	 */
	public static String getCookieValues(HttpServletRequest request, String cookieName) {
		Cookie[] cookies = request.getCookies();
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if (StringUtils.equals(cookie.getName(), cookieName)) {
					System.out.println("取得Cookie:" + cookie.getName() + " <==> " + cookie.getValue());
					return cookie.getValue();
				}
			}
		} else {
			System.out.println("cooike是空的");
		}

		return null;
	}

	/**
	 * 取request回來的cookie
	 */
	public static void setCookieValues(HttpServletResponse response, String cookieName, String cookieValues) {

		// 針對response設置cookie
		Cookie cookie = new Cookie(cookieName, cookieValues);
		cookie.setMaxAge(24 * 60 * 60);
		cookie.setPath("/");
		cookie.setHttpOnly(true);
		cookie.setSecure(true);
		response.addCookie(cookie);

		// 寫入靜態暫存

	}

	/**
	 * 物件轉JSON功能
	 * 
	 * @param obj
	 * @return
	 */
	public static String Object2Json(Object obj) {

		ObjectMapper mapper = new ObjectMapper();

		String jsonInString = "";
		logger.info("=====物件的內容:" + obj.toString() + ";=====");
		try {
			jsonInString = mapper.writeValueAsString(obj);

		} catch (JsonMappingException e) {
			logger.error(e.getMessage());
		} catch (JsonGenerationException e) {
			logger.error(e.getMessage());
		} catch (Exception e) {
			logger.error(e.getMessage());
		}

		return jsonInString;

	}

	/**
	 * JSON轉物件功能
	 * 
	 * @param json
	 * @param responceClass
	 * @return
	 * @throws JsonParseException
	 * @throws JsonMappingException
	 * @throws IOException
	 */
	public static <T> T json2Object(String json, Class<T> responceClass)
			throws JsonParseException, JsonMappingException, Exception {
		logger.info("=====JSON的內容:" + json + ";=====");
		ObjectMapper mapper = new ObjectMapper();
		return mapper.readValue(json, responceClass);
	}

	public static byte[] getSHA256(String input) throws NoSuchAlgorithmException {
		MessageDigest md = MessageDigest.getInstance("SHA-256");

		return md.digest(input.getBytes(StandardCharsets.UTF_8));
	}

	public static String toHexString(byte[] hash) {
		BigInteger number = new BigInteger(1, hash);

		StringBuilder hexString = new StringBuilder(number.toString(16));

		while (hexString.length() < 32) {
			hexString.insert(0, '0');
		}

		return hexString.toString();
	}

	public static String TaipeiPassCheckCode(String str) {
		if (StringUtils.isNotBlank(str)) {
			try {
				//org.apache.commons.codec.digest.DigestUtils.sha256Hex(str).substring(0, 6)
				return toHexString(getSHA256(str)).substring(0, 6).toUpperCase();
			} catch (NoSuchAlgorithmException e) {
				e.printStackTrace();
			}
			return null;
		} else {
			return null;
		}

	}

}
